trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: BuildId
    value: $(Build.BuildId)

stages:
  - stage: BuildAndDeployBackendDev
    variables:
      - group: ttnf-dev
      - name: BackendImageName
        value: backend-dev
      - name: BackendImageTag
        value: $(BuildId)-dev
    jobs:
      - job: BuildBackend
        displayName: 'Build and Deploy Backend to Dev'
        steps:
          - checkout: self

          - task: Docker@2
            displayName: 'Build and Push Backend Image'
            inputs:
              containerRegistry: 'ttnfdockerservice'
              repository: '$(BackendImageName)'
              command: 'buildAndPush'
              Dockerfile: 'backend/Dockerfile'
              tags: |
                $(BackendImageTag)

          - task: AzureWebAppContainer@1
            displayName: 'Deploy Backend to Dev'
            inputs:
              azureSubscription: 'ttnfconnect'
              appName: 'ttnf-api-dev'
              containers: 'ttnfregistry.azurecr.io/$(BackendImageName):$(BackendImageTag)'

  - stage: BuildAndDeployFrontendDev
    variables:
      - group: ttnf-dev
      - name: FrontendImageName
        value: frontend-dev
      - name: FrontendImageTag
        value: $(BuildId)-dev
    jobs:
      - job: BuildFrontend
        displayName: 'Build and Deploy Frontend to Dev'
        steps:
          - checkout: self

          - script: echo $(REACT_APP_BACKEND_URL)
            displayName: 'Verify REACT_APP_BACKEND_URL is set'

          - task: Docker@2
            displayName: 'Build Frontend Image'
            inputs:
              containerRegistry: 'ttnfdockerservice'
              repository: '$(FrontendImageName)'
              command: 'build'
              Dockerfile: 'frontend/Dockerfile'
              arguments: |
                --build-arg REACT_APP_BACKEND_URL=$(REACT_APP_BACKEND_URL)
                --build-arg REACT_APP_TINYMCE_API_KEY=$(REACT_APP_TINYMCE_API_KEY)
                --build-arg REACT_APP_ENV=development
                --build-arg NODE_ENV=development
              tags: |
                $(FrontendImageTag)

          - task: Docker@2
            displayName: 'Push Frontend Image'
            inputs:
              containerRegistry: 'ttnfdockerservice'
              repository: '$(FrontendImageName)'
              command: 'push'
              tags: |
                $(FrontendImageTag)

          - task: AzureWebAppContainer@1
            displayName: 'Deploy Frontend to Dev'
            inputs:
              azureSubscription: 'ttnfconnect'
              appName: 'ttnf-dev'
              containers: 'ttnfregistry.azurecr.io/$(FrontendImageName):$(FrontendImageTag)'

  - stage: PromoteToProduction
    dependsOn:
      - BuildAndDeployBackendDev
      - BuildAndDeployFrontendDev
    variables:
      - group: ttnf
      - name: BackendImageName
        value: backend
      - name: BackendImageTag
        value: $(BuildId)-prod
      - name: FrontendImageName
        value: frontend
      - name: FrontendImageTag
        value: $(BuildId)-prod
    jobs:
      - deployment: DeployBackendProd
        displayName: 'Deploy Backend to Production'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: Docker@2
                  displayName: 'Build and Push Backend Image for Production'
                  inputs:
                    containerRegistry: 'ttnfdockerservice'
                    repository: '$(BackendImageName)'
                    command: 'buildAndPush'
                    Dockerfile: 'backend/Dockerfile'
                    tags: |
                      $(BackendImageTag)

                - task: AzureWebAppContainer@1
                  displayName: 'Deploy Backend to Production'
                  inputs:
                    azureSubscription: 'ttnfconnect'
                    appName: 'ttnfapi'
                    containers: 'ttnfregistry.azurecr.io/$(BackendImageName):$(BackendImageTag)'

      - deployment: DeployFrontendProd
        displayName: 'Deploy Frontend to Production'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: Docker@2
                  displayName: 'Build Frontend Image for Production'
                  inputs:
                    containerRegistry: 'ttnfdockerservice'
                    repository: '$(FrontendImageName)'
                    command: 'build'
                    Dockerfile: 'frontend/Dockerfile'
                    arguments: |
                      --build-arg REACT_APP_BACKEND_URL=$(REACT_APP_BACKEND_URL)
                      --build-arg REACT_APP_TINYMCE_API_KEY=$(REACT_APP_TINYMCE_API_KEY)
                      --build-arg REACT_APP_ENV=production
                      --build-arg NODE_ENV=production
                    tags: |
                      $(FrontendImageTag)

                - task: Docker@2
                  displayName: 'Push Frontend Image for Production'
                  inputs:
                    containerRegistry: 'ttnfdockerservice'
                    repository: '$(FrontendImageName)'
                    command: 'push'
                    tags: |
                      $(FrontendImageTag)

                - task: AzureWebAppContainer@1
                  displayName: 'Deploy Frontend to Production'
                  inputs:
                    azureSubscription: 'ttnfconnect'
                    appName: 'ttnfpub'
                    containers: 'ttnfregistry.azurecr.io/$(FrontendImageName):$(FrontendImageTag)'