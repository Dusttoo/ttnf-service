"""increased description char limits

Revision ID: 43a96fadd85b
Revises: 959126f83342
Create Date: 2025-02-09 22:48:16.972985

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '43a96fadd85b'
down_revision: Union[str, None] = '959126f83342'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('service_tags')
    op.drop_table('services')
    op.drop_table('tags')
    op.drop_table('service_categories')
    op.alter_column('breedings', 'description',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=2500),
               existing_nullable=True)
    op.alter_column('productions', 'description',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=2500),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('productions', 'description',
               existing_type=sa.String(length=2500),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('breedings', 'description',
               existing_type=sa.String(length=2500),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.create_table('service_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('service_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='service_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tags_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('services',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('services_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('price', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('availability', postgresql.ENUM('AVAILABLE', 'LIMITED', 'OUT_OF_STOCK', name='servicestatus'), server_default=sa.text("'AVAILABLE'::servicestatus"), autoincrement=False, nullable=False),
    sa.Column('cta_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cta_link', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('disclaimer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('eta', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_price', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('shipping_type', postgresql.ENUM('Standard', 'Express', 'Overnight', name='shippingtype'), autoincrement=False, nullable=True),
    sa.Column('image', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.id'], name='services_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='services_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_tags',
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name='service_tags_service_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='service_tags_tag_id_fkey'),
    sa.PrimaryKeyConstraint('service_id', 'tag_id', name='service_tags_pkey')
    )
    # ### end Alembic commands ###
